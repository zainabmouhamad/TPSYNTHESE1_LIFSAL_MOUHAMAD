#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <time.h>

#define BUFFER_SIZE 128 

// Function to display the prompt
void display_prompt() {
    const char *prompt = "enseash % "; 
    write(STDOUT_FILENO, prompt, strlen(prompt)); // Display the prompt on the terminal
}

int main() {
    char buffer[BUFFER_SIZE]; // Buffer to store user input from the terminal
    ssize_t bytes_read; // Variable to store the number of bytes read from input 
    pid_t pid; 
    int status; // Variable to store the exit status of the child process

    display_prompt(); // Display the shell prompt

    while (1) {
        // Read user input from the terminal (max size: BUFFER_SIZE - 1)
        bytes_read = read(STDIN_FILENO, buffer, BUFFER_SIZE - 1);

        if (bytes_read == 0) {  
            write(STDOUT_FILENO, "Bye bye...\n", 11);  // Print the exit message
            break;  // Exit the shell loop
        }

        if (bytes_read > 0) { 
            buffer[bytes_read - 1] = '\0'; // Replace the character with '\0' 

            // Check if the user typed "exit"
            if (strcmp(buffer, "exit") == 0) {
                write(STDOUT_FILENO, "Bye bye...\n", 11);
                break;  
            }

            pid = fork(); // Create a new process (child process)
            if (pid == 0) { // If we are in the child process
                execlp(buffer, buffer, NULL); // Execute the command typed by the user

                // If the command doesn't exist, print an error message
                const char *error_msg = "Command not found\n";
                write(STDOUT_FILENO, error_msg, strlen(error_msg));
                exit(EXIT_FAILURE); // Exit the child process with an error
            } else if (pid > 0) { // If we are in the parent process
                wait(&status); // Wait for the child process to finish executing

                // Check if the child process exited normally
                if (WIFEXITED(status) == 1) {
                    char msg[BUFFER_SIZE]; // Buffer to store the exit status message
                    int exit_code = WEXITSTATUS(status); // Get the exit code of the child process
                    snprintf(msg, BUFFER_SIZE, "enseash [exit:%d] %%\n", exit_code); // Create the exit status message with status number
                    write(STDOUT_FILENO, msg, strlen(msg)); // Display the exit status message
                } 
                // If the child process was terminated by a signal
                else if (WIFSIGNALED(status) == 1) {
                    char msg[BUFFER_SIZE]; // Buffer to store the signal message
                    int signal = WTERMSIG(status); // Get the status number that terminated the child process
                    snprintf(msg, BUFFER_SIZE, "enseash [sign:%d] %%\n", signal); // Create the signal message
                    write(STDOUT_FILENO, msg, strlen(msg)); // Display the signal message
                }
            }
        }
    }

    return 0; 
}

